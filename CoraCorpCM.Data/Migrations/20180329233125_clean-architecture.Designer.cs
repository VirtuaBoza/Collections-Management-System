// <auto-generated />
using System;
using CoraCorpCM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;

namespace CoraCorpCM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180329233125_clean-architecture")]
    partial class cleanarchitecture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview1-28290")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoraCorpCM.App.Membership.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MuseumId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Acquisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Cost");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("FundingSourceId");

                    b.Property<int>("MuseumId");

                    b.Property<int?>("PieceSourceId");

                    b.Property<int?>("PurchaseReceiptId");

                    b.Property<string>("Terms");

                    b.HasKey("Id");

                    b.HasIndex("FundingSourceId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("PieceSourceId");

                    b.HasIndex("PurchaseReceiptId");

                    b.ToTable("Acquisitions");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlsoKnownAs");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("CityOfOrigin");

                    b.Property<int?>("CountryOfOriginId");

                    b.Property<DateTime?>("Deathdate")
                        .HasColumnType("date");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("StateOfOrigin");

                    b.HasKey("Id");

                    b.HasIndex("CountryOfOriginId");

                    b.HasIndex("MuseumId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistGenre", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<int>("GenreId");

                    b.Property<int>("MuseumId");

                    b.HasKey("ArtistId", "GenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MuseumId");

                    b.ToTable("ArtistGenre");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistMedium", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<int>("MediumId");

                    b.Property<int>("MuseumId");

                    b.HasKey("ArtistId", "MediumId");

                    b.HasIndex("MediumId");

                    b.HasIndex("MuseumId");

                    b.ToTable("ArtistMedium");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistSubgenre", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<int>("SubgenreId");

                    b.Property<int>("MuseumId");

                    b.HasKey("ArtistId", "SubgenreId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("SubgenreId");

                    b.ToTable("ArtistSubgenre");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistSubjectMatter", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<int>("SubjectMatterId");

                    b.Property<int>("MuseumId");

                    b.HasKey("ArtistId", "SubjectMatterId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("SubjectMatterId");

                    b.ToTable("ArtistSubjectMatter");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistTag", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<int>("TagId");

                    b.Property<int>("MuseumId");

                    b.HasKey("ArtistId", "TagId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("TagId");

                    b.ToTable("ArtistTag");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Condition");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Curator");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("LocationId");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Theme");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MuseumId");

                    b.ToTable("Exhibition");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ExhibitionPiece", b =>
                {
                    b.Property<int>("ExhibitionId");

                    b.Property<int>("PieceId");

                    b.Property<int>("MuseumId");

                    b.HasKey("ExhibitionId", "PieceId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("PieceId");

                    b.ToTable("ExhibitionPiece");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.FundingSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("FundingSources");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ConditionId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("InspectorId");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Notes");

                    b.Property<int>("PieceId");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("InspectorId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("PieceId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Inspector");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ExhibitionId");

                    b.Property<DateTime>("FromDate");

                    b.Property<int?>("FromLocationId");

                    b.Property<int?>("LoanAgreementId");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Terms");

                    b.Property<DateTime>("ToDate");

                    b.Property<int?>("ToLocationId");

                    b.HasKey("Id");

                    b.HasIndex("ExhibitionId");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("LoanAgreementId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.LoanPiece", b =>
                {
                    b.Property<int>("LoanId");

                    b.Property<int>("PieceId");

                    b.Property<int>("MuseumId");

                    b.HasKey("LoanId", "PieceId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("PieceId");

                    b.ToTable("LoanPiece");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<int?>("CountryId");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MuseumId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.LocationTag", b =>
                {
                    b.Property<int>("LocationId");

                    b.Property<int>("TagId");

                    b.Property<int>("MuseumId");

                    b.HasKey("LocationId", "TagId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("TagId");

                    b.ToTable("LocationTag");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Museum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<int?>("CountryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RecordCount");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.Property<string>("State");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Museums");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Piece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessionNumber");

                    b.Property<int?>("AcquisitionId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int?>("ArtistId");

                    b.Property<string>("CityOfOrigin");

                    b.Property<int?>("CollectionId");

                    b.Property<string>("CopyrightOwner");

                    b.Property<int?>("CopyrightYear");

                    b.Property<int?>("CountryOfOriginId");

                    b.Property<int?>("CreationDay");

                    b.Property<int?>("CreationMonth");

                    b.Property<int?>("CreationYear");

                    b.Property<int?>("CurrentLocationId");

                    b.Property<double?>("Depth");

                    b.Property<decimal?>("EstimatedValue");

                    b.Property<int?>("GenreId");

                    b.Property<double?>("Height");

                    b.Property<decimal?>("InsuranceAmount");

                    b.Property<string>("InsuranceCarrier");

                    b.Property<DateTime?>("InsuranceExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("InsurancePolicyNumber");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsFramed");

                    b.Property<DateTime>("LastModified");

                    b.Property<int?>("MediumId");

                    b.Property<int>("MuseumId");

                    b.Property<int?>("PermanentLocationId");

                    b.Property<int?>("PhotoId");

                    b.Property<int>("RecordNumber");

                    b.Property<string>("StateOfOrigin");

                    b.Property<int?>("SubgenreId");

                    b.Property<string>("Subject");

                    b.Property<int?>("SubjectMatterId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<int?>("UnitOfMeasureId");

                    b.Property<double?>("Width");

                    b.HasKey("Id");

                    b.HasIndex("AcquisitionId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("CountryOfOriginId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MediumId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("PermanentLocationId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("SubgenreId");

                    b.HasIndex("SubjectMatterId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.PieceSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("PieceSources");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.PieceTag", b =>
                {
                    b.Property<int>("PieceId");

                    b.Property<int>("TagId");

                    b.Property<int>("MuseumId");

                    b.HasKey("PieceId", "TagId");

                    b.HasIndex("MuseumId");

                    b.HasIndex("TagId");

                    b.ToTable("PieceTag");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Subgenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Subgenres");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.SubjectMatter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("SubjectMatters");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("UnitsOfMeasure");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Upload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<int>("MuseumId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MuseumId")
                        .IsUnique();

                    b.ToTable("Upload");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoraCorpCM.App.Membership.ApplicationUser", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Acquisition", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.FundingSource", "FundingSource")
                        .WithMany("Acquisitions")
                        .HasForeignKey("FundingSourceId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.PieceSource", "PieceSource")
                        .WithMany("Acquisitions")
                        .HasForeignKey("PieceSourceId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Upload", "PurchaseReceipt")
                        .WithMany()
                        .HasForeignKey("PurchaseReceiptId");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Artist", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Country", "CountryOfOrigin")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistGenre", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Genre", "Genre")
                        .WithMany("ArtistGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistMedium", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistMedia")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Medium", "Medium")
                        .WithMany("ArtistMedia")
                        .HasForeignKey("MediumId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistSubgenre", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistSubgenres")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Subgenre", "Subgenre")
                        .WithMany("ArtistSubgenres")
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistSubjectMatter", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistSubjectMatters")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.SubjectMatter", "SubjectMatter")
                        .WithMany("ArtistSubjectMatters")
                        .HasForeignKey("SubjectMatterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ArtistTag", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistTags")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Tag", "Tag")
                        .WithMany("ArtistTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Collection", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Condition", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Exhibition", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.ExhibitionPiece", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany("ExhibitionPieces")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Piece", "Piece")
                        .WithMany("ExhibitionPieces")
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.FundingSource", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Genre", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Inspection", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Condition", "Condition")
                        .WithMany("Inspections")
                        .HasForeignKey("ConditionId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Inspector", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Piece", "Piece")
                        .WithMany("Inspections")
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Inspector", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Loan", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Exhibition", "Exhibition")
                        .WithMany()
                        .HasForeignKey("ExhibitionId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Location", "FromLocation")
                        .WithMany()
                        .HasForeignKey("FromLocationId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Upload", "LoanAgreement")
                        .WithMany()
                        .HasForeignKey("LoanAgreementId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Location", "ToLocation")
                        .WithMany()
                        .HasForeignKey("ToLocationId");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.LoanPiece", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Loan", "Loan")
                        .WithMany("LoanPieces")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Piece", "Piece")
                        .WithMany("LoanPieces")
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Location", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.LocationTag", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Location", "Location")
                        .WithMany("LocationTags")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Tag", "Tag")
                        .WithMany("LocationTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Medium", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Museum", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Piece", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Acquisition", "Acquisition")
                        .WithMany("Pieces")
                        .HasForeignKey("AcquisitionId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Artist", "Artist")
                        .WithMany("Pieces")
                        .HasForeignKey("ArtistId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Collection", "Collection")
                        .WithMany("Pieces")
                        .HasForeignKey("CollectionId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Country", "CountryOfOrigin")
                        .WithMany()
                        .HasForeignKey("CountryOfOriginId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Genre", "Genre")
                        .WithMany("Pieces")
                        .HasForeignKey("GenreId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Medium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Location", "PermanentLocation")
                        .WithMany()
                        .HasForeignKey("PermanentLocationId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Upload", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("CoraCorpCM.Domain.Entities.Subgenre", "Subgenre")
                        .WithMany()
                        .HasForeignKey("SubgenreId");

                    b.HasOne("CoraCorpCM.Domain.Entities.SubjectMatter", "SubjectMatter")
                        .WithMany("Pieces")
                        .HasForeignKey("SubjectMatterId");

                    b.HasOne("CoraCorpCM.Domain.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId");
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.PieceSource", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.PieceTag", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.Domain.Entities.Piece", "Piece")
                        .WithMany("PieceTags")
                        .HasForeignKey("PieceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoraCorpCM.Domain.Entities.Tag", "Tag")
                        .WithMany("PieceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Subgenre", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.SubjectMatter", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Tag", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithMany()
                        .HasForeignKey("MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoraCorpCM.Domain.Entities.Upload", b =>
                {
                    b.HasOne("CoraCorpCM.Domain.Entities.Museum", "Museum")
                        .WithOne("Logo")
                        .HasForeignKey("CoraCorpCM.Domain.Entities.Upload", "MuseumId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoraCorpCM.App.Membership.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoraCorpCM.App.Membership.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoraCorpCM.App.Membership.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoraCorpCM.App.Membership.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
